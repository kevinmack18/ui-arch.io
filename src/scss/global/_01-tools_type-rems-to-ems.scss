$browser-context: #{str-replace(#{$rootFontSize}, 'px', '')};


/*
---
name: String to Number
category: Tools > Functions
---

Casts a string into a number.

Source/Credit: [http://sassmeister.com/gist/9fa19d254864f33d4a80](http://sassmeister.com/gist/9fa19d254864f33d4a80)

* @param {String | Number} $value - Value to be parsed
* @return {Number}


Usage:

```
@function foo(param: $some-string-that-may-not-be-a-number) {
	@return to-number(unquote("param"));
}
```

*/

@function to-number($value) {
	@if type-of($value) == 'number' {
		@return $value;
	} @else if type-of($value) != 'string' {
		$_: log('Value for `to-number` should be a number or a string.');
	}

	$result: 0;
	$digits: 0;
	$minus: str-slice($value, 1, 1) == '-';
	$numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);

	@for $i from if($minus, 2, 1) through str-length($value) {
		$character: str-slice($value, $i, $i);

		@if not (index(map-keys($numbers), $character) or $character == '.') {
			@return to-length(if($minus, -$result, $result), str-slice($value, $i))
		}

		@if $character == '.' {
			$digits: 1;
		} @else if $digits == 0 {
			$result: $result * 10 + map-get($numbers, $character);
		} @else {
			$digits: $digits * 10;
			$result: $result + map-get($numbers, $character) / $digits;
		}
	}

	@return if($minus, -$result, $result);;
}


///
/// Add `$unit` to `$value`
///
/// @param {Number} $value - Value to add unit to
/// @param {String} $unit - String representation of the unit
///
/// @return {Number} - `$value` expressed in `$unit`
///
@function to-length($value, $unit) {
	$units: ('px': 0.063rem, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);

	@if not index(map-keys($units), $unit) {
		$_: log('Invalid unit `#{$unit}`.');
	}

	@return $value * map-get($units, $unit);
}


/*
---
name: Pixel to REM
category: Tools > Functions
---

Converts `px` unit to `rem` unit


* @param {String | Number} $pixels - Value to be parsed (do not include `px`)
* @param {String | Number} $context - Base root font size (do not include `px`)
* @return {Number}


Usage:

```
.selector-name {
	font-size: rem(18);
}
```

*/



@function rem(to-number(str-replace(#{$pixels}, 'px', '')), $context: to-number($browser-context), $em: false) {
	@return to-number(unquote("#{$pixels / $context}#{if($em != true, "rem", "em")}"));
}


/*
---
name: Pixel to EM
category: Tools > Functions
---

Converts `px` unit to `em` unit


* @param {String | Number} $pixels - Value to be parsed (do not include `px`)
* @param {String | Number} $context - Base root font size (do not include `px`)
* @return {Number}


Usage:

```
.selector-name {
	font-size: em(18);
}

.demo-2 {
	font-size: em(64) * 2;
}
```

*/

@function em(to-number(str-replace(#{$pixels}, 'px', '')), $context: to-number($browser-context)) {
	@return rem($pixels, $context, true);
}