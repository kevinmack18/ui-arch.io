.u-offset-fs {
	&-6 {
		@include suffixcate {
			margin-top: -$h6;
		}
	}
}

.u-list {
	@include suffixcate {
		padding-left: 1rem;
	}
}

.u-unlist {
	@include suffixcate {
		@include unlist;
	}
}

.u-w {
	@include suffixcate {
		word-break: break-all;
	}
}

.u-nw {
	@include suffixcate {
		white-space: nowrap;
	}

	&-children {
		@include suffixcate {
			* {
				white-space: nowrap;
			}
		}
	}
}

.u-bw {
	@include suffixcate {
		word-break: break-all;
	}

	&-children {
		@include suffixcate {
			* {
				word-break: break-all;
			}
		}
	}
}

.u-va-t {
	@include suffixcate {
		vertical-align: top;
	}

	&-before {
		@include suffixcate {
			&:before {
				vertical-align: top;
			}
		}
	}

	&-after {
		@include suffixcate {
			&:after {
				vertical-align: top;
			}
		}
	}
}

.u-va-m {
	@include suffixcate {
		vertical-align: middle;
	}

	&-before {
		@include suffixcate {
			&:before {
				vertical-align: middle;
			}
		}
	}

	&-after {
		@include suffixcate {
			&:after {
				vertical-align: middle;
			}
		}
	}
}

.u-va-b {
	@include suffixcate {
		vertical-align: bottom;
	}

	&-before {
		@include suffixcate {
			&:before {
				vertical-align: bottom;
			}
		}
	}

	&-after {
		@include suffixcate {
			&:after {
				vertical-align: bottom;
			}
		}
	}
}


%display-hidden {
	@include suffixcate {
		display: none;
	}
}

%u-speak-none {
	@include suffixcate {
		speak: none;
	}
}

.u-speak-none {
	@extend %u-speak-none;

	&\@large {
		@extend %u-speak-none\@large !optional;
	}

	&\@small {
		@extend %u-speak-none\@small !optional;
	}
}

.u-dis-none {
	@extend %u-speak-none;
	@extend %display-hidden;

	@include suffixcate($bp: $suffixcate_bp-all, $all: true, $base: false) {
		speak: none;
		display: none;
	}
}


%clear-setup {
	clear: both;
}

%clear-after-setup {
	&:after {
		@extend %clear-setup;
		display: table;
		content: "";
	}
}

.o-clear {
	@extend %clear-setup;

	&-after {
		@extend %clear-after-setup;
	}
}

%f-r {
	float: right;
}

.u-f-r {
	@extend %f-r;

	&-children {
		@extend %clear-after-setup;

		> div, > li, > span {
			@extend %f-r;
		}
	}
}

%f-l {
	float: left;
}

.u-f-l {
	@extend %f-l;

	&-children {
		@extend %clear-after-setup;

		> div, > li, > span {
			@extend %f-l;
		}
	}
}

.u-full {
	@include suffixcate {
		width: 100%;
	}

	&-alt {
		@include suffixcate {
			max-width: 100%;
		}
	}

	&-alt-2 {
		@include suffixcate {
			min-width: 100%;
		}
	}
}

.u-clear {
	@include suffixcate {
		clear: both;
	}
}

img, textarea, span, label, aside, main {
	&.u-full {
		display: block;

		&\@large {
			@media screen and (min-width: $bp-large) {
				display: block;
			}
		}

		&\@small {
			@media screen and (max-width: $bp-large) {
				display: block;
			}
		}
	}
}


.u-round {
	border-radius: 50%;
	overflow: hidden;
}


.u-auto-t {
	@include suffixcate($bp: $suffixcate_bp-all) {
		margin-top: auto;
	}
}

.u-auto-r {
	@include suffixcate($bp: $suffixcate_bp-all) {
		margin-right: auto;
	}
}

.u-auto-b {
	@include suffixcate($bp: $suffixcate_bp-all) {
		margin-bottom: auto;
	}
}

.u-auto-l {
	@include suffixcate($bp: $suffixcate_bp-all) {
		margin-left: auto;
	}
}

.u-center {
	@include suffixcateExtend(('.u-auto-r'));
	@include suffixcateExtend(('.u-auto-l'));
}

.u-vis-0 {
	@include suffixcate {
		position: absolute;
		top: -3125rem;
		left: -3125rem;
		font-size: 0;
		height: 0;
		width: 0;
		overflow: hidden;
		visibility: none;
	}
}

.u-hidden {
	@extend %display-hidden;

	&\@large {
		@extend %display-hidden\@large !optional;
	}

	&\@small {
		@extend %display-hidden\@small !optional;
	}
}

%u-char-glyph {
	@include glyph;
}

%u-char-glyph-default {
	width: rem(40);
	text-align: center;
}

.u-td-none {
	text-decoration: none;
}

.u-td {
	text-decoration: underline;
}

.u-shadow {
	@include suffixcate {
		box-shadow: 0 rem(1) rem(2) rgba(0,0,0,.075), 0 rem(-1) rem(2) rgba(255,255,255,.05);
	}
}


a {
	&:hover, &:active {
		.u-data-title-button:before, .u-data-title-button:after {
			// background-color: $button-bg-hover;
			background-color: rgba(255,255,255,.7);
		}
	}

	&:active {
		.u-data-title-button:before, .u-data-title-button:after {
			// background-color: $button-bg-active;
		}
	}
}


$u-outline-styles-base: 1px solid;
$u-outline-styles: ($default-space / 2) solid #FFF;
.u-outline {
	&-1 {
		@include suffixcate {
			border-top: $u-outline-styles;
		}
	}

	&-2 {
		@include suffixcate {
			border-right: $u-outline-styles;
		}
	}

	&-3 {
		@include suffixcate {
			border-bottom: $u-outline-styles;
		}
	}

	&-4 {
		@include suffixcate {
			border-left: $u-outline-styles;
		}
	}

	@include suffixcateExtend((".u-outline-1", ".u-outline-2", ".u-outline-3", ".u-outline-4"));

	&-1-3 {
		@include suffixcateExtend((".u-outline-1", ".u-outline-3"));
	}

	&-2-4 {
		@include suffixcateExtend((".u-outline-2", ".u-outline-4"));
	}
}


%u-border-color {
	@each $color, $values in $palette {
		&--#{$color} {
			@include suffixcate {
				border-color: unquote(nth($values, 1));
			}
		}
	}
}

%u-border-xlg {
	@include suffixcate {
		@media screen and (min-width: $bp-spaces) {
			border-width: rem(10) !important;
		}

		@media screen and (max-width: $bp-spaces) {
			border-width: rem(5) !important;
		}
	}
}

.u-border {
	&-1 {
		@include suffixcate {
			border-top: $u-outline-styles-base;
		}

		&-xlg {
			@include suffixcateExtend(('%u-border-xlg'));
		}
	}

	&-2 {
		@include suffixcate($bp: $suffixcate_bp-all) {
			border-right: $u-outline-styles-base;
		}

		&-xlg {
			@include suffixcateExtend(('%u-border-xlg'));
		}
	}

	&-3 {
		@include suffixcate {
			border-bottom: $u-outline-styles-base;
		}

		&-xlg {
			@include suffixcateExtend(('%u-border-xlg'));
		}
	}

	&-4 {
		@include suffixcate {
			border-left: $u-outline-styles-base;
		}

		&-xlg {
			@include suffixcateExtend(('%u-border-xlg'));
		}
	}

	@include suffixcateExtend((".u-border-1", ".u-border-2", ".u-border-3", ".u-border-4"));

	&-1-3 {
		@include suffixcateExtend((".u-border-1", ".u-border-3"));
	}

	&-2-4 {
		@include suffixcateExtend((".u-border-2", ".u-border-4"));
	}

	&-lg {
		@include suffixcateExtend((".u-border-1", ".u-border-2", ".u-border-3", ".u-border-4"));

		@include suffixcate {
			border-width: rem(4);
		}
	}

	&-xlg {
		@include suffixcateExtend((".u-border-1-xlg", ".u-border-2-xlg", ".u-border-3-xlg", ".u-border-4-xlg"));
	}

	@each $color, $values in $palette {
		@include suffixcate {
			&--#{$color} {
				border-color: unquote(nth($values, 1));
			}
		}
	}

	&-children {
		@include suffixcate {
			> * + * {
				border-left: $u-outline-styles-base;
			}

			@each $color, $values in $palette {
				&--#{$color} {
					> * + * {
						border-color: unquote(nth($values, 1)) !important;
					}
				}
			}
		}

		&-xlg {
			@include suffixcateExtend(('.u-border-children'));
			@include suffixcate {
				> * + * {
					@media screen and (min-width: $bp-spaces) {
						border-width: rem(10);
					}

					@media screen and (max-width: $bp-spaces) {
						border-width: rem(5);
					}
				}
			}
		}
	}

	&-sections {
		@include suffixcate {
			> * + * {
				border-top: $u-outline-styles-base;
			}

			@each $color, $values in $palette {
				&--#{$color} {
					> * + * {
						border-color: unquote(nth($values, 1)) !important;
					}
				}
			}
		}


		&-lg {
			@include suffixcateExtend(('.u-border-sections'));
			@include suffixcate {
				> * + * {
					border-top-width: rem(2);
				}
			}
		}


		&-xlg {
			@include suffixcateExtend(('.u-border-sections'));
			@include suffixcate {
				> * + * {
					@media screen and (min-width: $bp-spaces) {
						border-width: rem(10);
					}

					@media screen and (max-width: $bp-spaces) {
						border-width: rem(5);
					}
				}
			}
		}
	}


	&-rows {
		@include suffixcate {
			&__row ~ &__row {
				border-top: $u-outline-styles-base;
			}

			@each $color, $values in $palette {
				&--#{$color} > &__row {
					border-color: unquote(nth($values, 1));
				}
			}
		}
	}
}


.u-radius-tr {
	@include suffixcate {
		border-top-right-radius: rem(3);
	}
}

.u-radius-br {
	@include suffixcate {
		border-bottom-right-radius: rem(3);
	}
}

.u-radius-bl {
	@include suffixcate {
		border-bottom-left-radius: rem(3);
	}
}

.u-radius-tl {
	@include suffixcate {
		border-top-left-radius: rem(3);
	}
}

.u-radius {
	@include suffixcateExtend(('.u-radius-tr', '.u-radius-br', '.u-radius-bl', '.u-radius-tl'));

	&-lg {
		border-radius: rem(28);
	}
}

.u-fat {
	font-weight: bold;
}

.u-min-click {
	min-width: 40px;
	min-height: 40px;
}

.u-disable-select {
	@include disable-select;
}

.u-o-f, .u-of-cover, u-object-fit-cover {
	object-fit: cover;
}


/*
---
name: Order
category: 3. Trumps > Extras
---

Requires parent container to have either `display: flex;` or `display: grid;`.

*  Contains [Suffixcate](/#suffixcate) options available for all options and utility versions;

Options:
* `.u-order-0`: `order: 0;`
* `.u-order-1`: `order: 1;`
* `.u-order-1-neg`: `order: -1;`
* `.u-order-2`: `order: 2;`
* `.u-order-2-neg`: `order: -2;`
* `.u-order-3`: `order: 3;`
* `.u-order-3-neg`: `order: -3;`
* `.u-order-4`: `order: 4;`
* `.u-order-4-neg`: `order: -4;`
* `.u-order-5`: `order: 5;`
* `.u-order-5-neg`: `order: -5;`
* `.u-order-6`: `order: 6;`
* `.u-order-6-neg`: `order: -6;`
* `.u-order-7`: `order: 7;`
* `.u-order-7-neg`: `order: -7;`
* `.u-order-8`: `order: 8;`
* `.u-order-8-neg`: `order: -8;`
* `.u-order-9`: `order: 9;`
* `.u-order-9-neg`: `order: -9`
* `.u-order-10`: `order: 10;`
* `.u-order-10-neg`: `order: -10;`
* `.u-order-11`: `order: 11;`
* `.u-order-11-neg`: `order: -11;`
* `.u-order-12`: `order: 12;`
* `.u-order-12-neg`: `order: -12;`


```demo.html
<div class="o-flex>
	<div class="u-order-12">
		1
	</div>
	<div class="u-order-2-neg@large">
		2
	</div>
	<div>
		3
	</div>
	<div class="u-order-2@small">
		4
	</div>
</div>
```

*/

@for $i from 0 through 12 {
	.u-order-#{$i} {
		@include suffixcate {
			order: $i;
		}
	}

	@if ($i != 0) {
		.u-order-#{$i}-neg {
			@include suffixcate {
				order: -$i;
			}
		}
		
	}
}